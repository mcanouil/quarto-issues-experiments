[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Hey! I’m Scott Franz",
    "section": "",
    "text": "I am the Editor of The Gilpatrick. Currently, I am the only author of this blog, but I hope in the future that changes 🤞. If you are interested in collaborationg on a data project or writing a blog post feel free to reach out via email.\nI work as a data wrangler at the Institute for Social Resarch. I volunteer for Walk Bike Washtenaw an organization helping create safer and more comfortable transportation infrastructure for people in and around Ann Arbor, MI 🌳.\nI designed a study and wrote a paper about mindfulness, connection to nature, and pro-environmental behavior. I also helped analyze mother-adolscent conversations about volunteering in graduate school.\nThe timeline below indicates approximations of where I have spent my time thus far in my life.\n\nimport { Plot } from \"@mkfreeman/plot-tooltip\"\n\ncareer = FileAttachment(\"career.csv\").csv({typed: true})\n\n\nparseDate = d3.utcParse(\"%Y\")\n\nclean_career = career.map(d =&gt; ({...d, start2: parseDate(d.start), end2: parseDate(d.end)}))\n\n\nPlot.plot({\n  marginLeft: 45,\n  width,\n  axis: null,\n  color: {\n    scheme: \"pastel2\"\n  },\n  x: {\n    axis: \"top\",\n    grid: true,\n  },\n  marks: [\n    Plot.barX(clean_career, {\n      x1: \"start2\",\n      x2: \"end2\",\n      fill: \"type\",\n      y: \"institution\",\n      title: (d) =&gt; `${d.title}`,\n      sort: {y: \"x1\"}\n    }),\n    Plot.text(clean_career, {\n      x: \"start2\",\n      y: \"institution\",\n      text: \"institution\",\n      textAnchor: \"end\",\n      dx: -3\n    })\n  ],\n  tooltip: {\n    stroke: \"cornflowerblue\"\n  }\n})"
  },
  {
    "objectID": "posts/your-life-in-weeks/index.html",
    "href": "posts/your-life-in-weeks/index.html",
    "title": "Your Life in Weeks",
    "section": "",
    "text": "Here is a little existential angst for your . Each red box is a week of your life. Each gray box in addition is a week left in an average individual’s lifetime in the US.\n\n\nCode\nviewof birthdate = Inputs.date({label: \"Your Birthday\", value:\"1991-11-11\", required: true, submit: true, width})\n\n\n\n\n\n\n\n\n\nCode\nimport {addAnimation} from \"@mkfreeman/plot-animation\"\n\nwaffles = addAnimation(Plot.plot({\n  width,\n  color: {\n    range: [\"red\", \"lightgray\"]\n  },\n  marks: [\n    Plot.cell(\n      units,\n      Plot.stackY({\n        x: (_, i) =&gt; i % 52,\n        fillOpacity: 0,\n        fill: \"group\"\n      })\n    )],\n  x: { axis: null },\n  y: { axis: null }\n}), { type: \"rect\", fillOpacity: 1, delay: 2 })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis was my inspiration. Also thanks to Fil for the waffle chart notebook"
  },
  {
    "objectID": "posts/your-life-in-weeks/index.html#introduction",
    "href": "posts/your-life-in-weeks/index.html#introduction",
    "title": "Your Life in Weeks",
    "section": "",
    "text": "Here is a little existential angst for your . Each red box is a week of your life. Each gray box in addition is a week left in an average individual’s lifetime in the US.\n\n\nCode\nviewof birthdate = Inputs.date({label: \"Your Birthday\", value:\"1991-11-11\", required: true, submit: true, width})\n\n\n\n\n\n\n\n\n\nCode\nimport {addAnimation} from \"@mkfreeman/plot-animation\"\n\nwaffles = addAnimation(Plot.plot({\n  width,\n  color: {\n    range: [\"red\", \"lightgray\"]\n  },\n  marks: [\n    Plot.cell(\n      units,\n      Plot.stackY({\n        x: (_, i) =&gt; i % 52,\n        fillOpacity: 0,\n        fill: \"group\"\n      })\n    )],\n  x: { axis: null },\n  y: { axis: null }\n}), { type: \"rect\", fillOpacity: 1, delay: 2 })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis was my inspiration. Also thanks to Fil for the waffle chart notebook"
  },
  {
    "objectID": "posts/your-life-in-weeks/index.html#math",
    "href": "posts/your-life-in-weeks/index.html#math",
    "title": "Your Life in Weeks",
    "section": "Math",
    "text": "Math\n\ntoday = new Date()\n\nday = today.getDay()\n\nDifference_Today = today.getTime() - birthdate.getTime();\n\nLife_In_Weeks = +((Difference_Today / (1000 * 3600 * 24)) / 7).toFixed(0);\n\nUS_Life_Expectancy_2020 = 77.0 * 52\n\nDifference_In_Life = US_Life_Expectancy_2020 - Life_In_Weeks\n\nweek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\ndata = [\n  {group: \"Life\", number: Life_In_Weeks},\n  {group: \"Total\", number: Difference_In_Life}\n]\n\nunits = data.flatMap(d =&gt; d3.range(Math.round(d.number)).map(() =&gt; d))"
  },
  {
    "objectID": "posts/hello-observable/index.html",
    "href": "posts/hello-observable/index.html",
    "title": "Hello, Observable!",
    "section": "",
    "text": "Observable is a new environment for JavaScript with a couple of tweaks (also supports HTML, CSS, Markdown, SQL, and TeX). It is the brainchild of Mike Bostock (D3.js creator). What sets Observable apart from previous programming notebook environments is its reactive runtime. In previous notebook iterations like Jupyter and R Markdown each cell could only reference previous cells in a certain order (from top to bottom). Observable is more like a spreadsheet where any cell/value referenced can update automatically (in any order). This makes it fun to use when composing interactive visualizations.\nWhy use Observable when there are so many interactive data visualization libraries in both R and Python? Well my take is that every interactive data visualization library in R and Python probably has JavaScript running under the hood. I feel like the only reasons we use these libraries are:\n\nWe don’t want to learn another language (especially JavaScript).\nJavaScript is geared towards web developers who understand all of the other pieces needed (the DOM, HTML, CSS, SVG, Canvas, SSR, Frameworks, etc).\nData wrangling in R and Python is a lot easier and more powerful than in JavaScript.\n\nBut since JavaScript is the language that manages interactivity on the web, it only makes sense to use it for interactive data visualizations. Observable helps us use JavaScript without the trouble of not knowing what we are doing as non-web developers."
  },
  {
    "objectID": "posts/hello-observable/index.html#introduction",
    "href": "posts/hello-observable/index.html#introduction",
    "title": "Hello, Observable!",
    "section": "",
    "text": "Observable is a new environment for JavaScript with a couple of tweaks (also supports HTML, CSS, Markdown, SQL, and TeX). It is the brainchild of Mike Bostock (D3.js creator). What sets Observable apart from previous programming notebook environments is its reactive runtime. In previous notebook iterations like Jupyter and R Markdown each cell could only reference previous cells in a certain order (from top to bottom). Observable is more like a spreadsheet where any cell/value referenced can update automatically (in any order). This makes it fun to use when composing interactive visualizations.\nWhy use Observable when there are so many interactive data visualization libraries in both R and Python? Well my take is that every interactive data visualization library in R and Python probably has JavaScript running under the hood. I feel like the only reasons we use these libraries are:\n\nWe don’t want to learn another language (especially JavaScript).\nJavaScript is geared towards web developers who understand all of the other pieces needed (the DOM, HTML, CSS, SVG, Canvas, SSR, Frameworks, etc).\nData wrangling in R and Python is a lot easier and more powerful than in JavaScript.\n\nBut since JavaScript is the language that manages interactivity on the web, it only makes sense to use it for interactive data visualizations. Observable helps us use JavaScript without the trouble of not knowing what we are doing as non-web developers."
  },
  {
    "objectID": "posts/hello-observable/index.html#tutorials",
    "href": "posts/hello-observable/index.html#tutorials",
    "title": "Hello, Observable!",
    "section": "Tutorials",
    "text": "Tutorials\nSo I know notebooks are not for everyone, but I think they are a great resource for learning (which for me is half the fun of programming). I started using Observable, about two years ago because of this Vega-Lite tutorial (pictured below) by Jeffrey Heer at the University of Washington.\n \nThis was the start of the adventure for me. After learning the basics I was hooked. I learned more about what Observable itself is capable of doing. They have a great YouTube channel with plenty of live-streams and tutorials. They also have notebook tutorials on D3, their new Observable Plot, and how to analyze time series data. There are plenty of other contributors too. These two tutorials on D3: Tyler Wolf’s 25 Days of D3 and NYU Visualization’s Guides/Examples, were both very helpful. I find the community encouraging. The ability to interact with the code and fork other user’s notebooks has been a huge bonus. I regularly find interesting notebooks where I import a part to use for my own work. Mike Freeman, Philippe Rivière, Ian Johnson, and of course Mike Bostock have been integral to my learning."
  },
  {
    "objectID": "posts/hello-observable/index.html#imports",
    "href": "posts/hello-observable/index.html#imports",
    "title": "Hello, Observable!",
    "section": "Imports",
    "text": "Imports\nIn Observable, you can import anything. Whether it is a chart, function, data, input, etc. I will show you a few examples here and give you further reading if you want to get into the details.\n\nimport {chart as streamgraph} from \"@d3/streamgraph-transitions\"\n\n\n\n\n\n\nThe cell above imports a chart from a notebook in the D3 Gallery. It was created by Mike Bostock as an example of what you can do with D3 transitions. Here I am using it as an example of how easy it is to import things. In the cell below all I had to do was type streamgraph and voila.\n\nstreamgraph\n\n\n\n\n\n\nIf we wanted to import a map and a drop down menu from another notebook. We could do that too. This drop down menu (input) selects different map projections. Check it out! It is also interactive. Use your mouse to click and drag to explore.\n\nimport {chart as map, viewof projectionName} from \"@d3/versor-dragging\"\n\n\n\n\n\n\n\nviewof projectionName\n\n\n\n\n\n\n\nmap\n\n\n\n\n\n\nBelow I imported an example dataset and some functions to add my own twist to the chart. Mike Freeman created some add-on functions for Observable Plot that enable you to both customize the tooltips and animation. So I over engineered this faceted scatter plot to animate the dots and when you hover over the dot it shows both a tooltip and enlarges the dot.\n\nimport {barley} from \"@observablehq/plot-facets\"\nimport {addTooltips} from \"@mkfreeman/plot-tooltip\"\nimport {addAnimation} from \"@mkfreeman/plot-animation\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvisibility().then(() =&gt;\naddAnimation(addTooltips(Plot.plot({ // I just added these wrappers to the beginning and\n  marginTop: 50,\n  marginLeft: 110,\n  height: 800,\n  grid: true,\n  x: {\n    nice: true\n  },\n  y: {\n    domain: d3.groupSort(barley, g =&gt; -d3.median(g, d =&gt; d.yield), d =&gt; d.variety),\n    inset: 5\n  },\n  fy: {\n    domain: d3.groupSort(barley, g =&gt; -d3.median(g, d =&gt; d.yield), d =&gt; d.site)\n  },\n  color: {\n    type: \"categorical\"\n  },\n  facet: {\n    data: barley,\n    y: \"site\",\n    marginRight: 90\n  },\n  marks: [\n    Plot.frame(),\n    Plot.dot(barley, {x: \"yield\", y: \"variety\", r: 0, stroke: \"year\", title: (d) =&gt; \n      `Yield: ${parseFloat((d.yield).toFixed(1))}  \\n Variety: ${d.variety} \\n Year: ${d.year} \\n Site:${d.site}`}) // this line for the tooltip titles and\n  ] // this line on the end to add animation and enlarge the dots on hover\n}), {r:15}), {type: \"circle\", attribute: \"r\", endValue: 3, delay: 100} ))\n\n\n\n\n\n\nBut wait that is not all that you can do! You can also modify your imported charts with your own or somebody else’s data. Here is an example of using a Bar Chart Race with the data from the original notebook.\n\nimport {chart as barChartRace, viewof replay} from \"@d3/bar-chart-race\"\n\n\n\n\n\n\n\nviewof replay\n\n\n\n\n\n\n\nbarChartRace\n\n\n\n\n\n\nSo above is what it would look like if I didn’t change the data. Below is what it looks like after I import different data. This data comes from Emil Hvitfeldt’s notebook where he uploaded a csv file of R package downloads over time. I could have also uploaded my own csv file, it just has to match the format of the data for the imported chart.\n\nimport {data as rPackages} from \"@emilhvitfeldt/race-for-most-downloaded-r-package\"\nimport {chart as rRace, viewof replay as replay2} with {rPackages as data} from \"@d3/bar-chart-race\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof replay2\n\n\n\n\n\n\n\nrRace\n\n\n\n\n\n\nA couple of things to note before we move on. You may have noticed that most of the charts were named charts in their original notebooks. In order to use more than one imported chart in this notebook I had to change the name. Otherwise, Observable would get confused if I referred to multiple cells with the same name. So in order to do that I use the as newName syntax. Additionally, it is easy to reference whichever Observable notebook you want by using the end of the URL. For example, I referenced most of the D3 charts by using from \"@D3/nameofnotebook\". There is a lot more to learn about imports and how useful they can be. Here is an introduction and here is an explainer of a new feature where you can “lock” your imports so that if a dependency changes it doesn’t ruin your import."
  },
  {
    "objectID": "posts/hello-observable/index.html#inputs",
    "href": "posts/hello-observable/index.html#inputs",
    "title": "Hello, Observable!",
    "section": "Inputs",
    "text": "Inputs\nObservable has some built-in libraries to help with user inputs. It leverages views which is a clever and way less confusing way to handle interactions and their outputs on the web.\nIn the cell below I gave a range of values 0 to 25, I gave a starting value value: 10 and I gave an interval to step between values in our range step: 1 and then I just named it r so we can reference it later. In Observable notebooks, viewof creates reactive variables of inputs so if I just do the following below.\n\nviewof r = Inputs.range([0, 25], {value: 10, step: 1})\n\n\n\n\n\n\n\nr\n\n\n\n\n\n\nIt updates when we move the slider. This works both in JavaScript and in Markdown here is the number: . This r variable can be plugged into anything we want. Lets add some color and data to make a chart.\n\nimport {penguins} from \"@enjalot/palmer-penguins\"\n\n\n\n\n\n\n\nviewof color = Inputs.radio([\"red\", \"green\", \"blue\"], {value: \"red\"})\n\n\n\n\n\n\nI reused the addTootips function I imported earlier and added the two reactive input variables we just created r and color. These two variables control the attributes when you hover over the dots in this visualization. Go ahead and change the fill color and size of the dots with the inputs above.\n\naddTooltips(\nPlot.plot({\n  grid: true,\n  facet: {\n    data: penguins,\n    x: \"sex\",\n    y: \"species\",\n    marginTop: 50,\n    marginRight: 80\n  },\n  marks : [\n    Plot.frame(),\n    Plot.dot(penguins, {x: \"flipper_length_mm\", y: \"body_mass_g\", stroke: \"island\", title: (d) =&gt;\n        `${d.species} \\n flipper length: ${d.flipper_length_mm} mm \\n body mass: ${d.body_mass_g} g`})\n  ]}), {r: r, fill: color}) //This is where the reactivity is happening\n\n\n\n\n\n\nThis also makes interacting with data very easy. Here are some NBA team names with their location.\n\nteams = [\n  {name: \"Lakers\", location: \"Los Angeles, California\"},\n  {name: \"Warriors\", location: \"San Francisco, California\"},\n  {name: \"Celtics\", location: \"Boston, Massachusetts\"},\n  {name: \"Nets\", location: \"New York City, New York\"},\n  {name: \"Raptors\", location: \"Toronto, Ontario\"},\n]\n\n\n\n\n\n\n\nviewof favorite = Inputs.radio(teams, {value: teams[0], label: \"Favorite team\", format: x =&gt; x.name})\n\n\n\n\n\n\nSo the cell above creates our input. It takes the teams dataset and uses the first variable in the array as its starting value value: teams[0]. The format option specifies how you want to present the value to the reader.\n\nfavorite.location\n\n\n\n\n\n\nThe name of the reactive input variable is favorite and we can access whichever variable in the dataset by putting a . and then the name of that variable. In this case it is location. To show the location of the team you can use the ${favorite.location} in the markdown. Try clicking on the radio buttons to see the different locations: . This way of writing in markdown is valuable when you want to create data driven documents. No need to edit your values manually in word documents anymore.\nBelow is an example of filtering a dataset (I am reusing the penguins dataset here). Click on the options below and see how the data changes when you select different options.\n\nviewof checkbox = Inputs.checkbox(\n  d3.group(penguins, (d) =&gt; d.island),\n  { key: [\"Dream\", \"Torgersen\"]}\n)\n\n\n\n\n\n\n\nfiltered = checkbox.flat()\n\n\n\n\n\n\n\nPlot.dot(filtered, {x: \"flipper_length_mm\", y: \"body_mass_g\", stroke: \"island\"}).plot()\n\n\n\n\n\n\nThe chart above uses the filtered dataset to create the scatterplot. As you can imagine there are endless capabilities of pairing these reactive input variables with whatever you are trying to create. I won’t try to make something super complex right now, but explore Observable and you will get a sense of the possibilities."
  },
  {
    "objectID": "posts/hello-observable/index.html#data-wrangling-and-analysis",
    "href": "posts/hello-observable/index.html#data-wrangling-and-analysis",
    "title": "Hello, Observable!",
    "section": "Data Wrangling (and Analysis)",
    "text": "Data Wrangling (and Analysis)\nOriginally, when I first started using Observable I would wrangle my data in R and then save a CSV file and then upload it to Observable. Since then I found Arquero which has been really awesome! There is actually a Tidy Data in JavaScript using Arquero that follows Hadley Wickham’s Tidy Data (Chapter 12, R for Data Science). Also this Illustrated Guide to Arquero Verbs is a good cheat sheet.\nData manipulation in vanilla JavaScript is still wonky to me. It makes very little sense in my head. A concern I had in the beginning was doing all of my data work in the browser. Saving my work online with a relatively new service gave me pause. For now Observable allows you to create unlimited amounts of notebooks for free. I have made over one hundred notebooks, and have not had any problems so far. Another concern I had (kinda still have) was Observable’s reliance on the browser’s engine. It is not yet equipped for processing big data files. File sizes are limited to 50 MBs per notebook and 1 GB over a 28-day period. There are alternatives like connecting to databases through Observable or using web APIs, but even then it is smart to subset your data if it is over a certain number of MBs for performance.\nLuckily, I found a promising new product that will probably be my go to work environment very soon. It is called Quarto. It is a project sponsored by Rstudio that integrates Observable JS, Julia, R, and Python. It does a lot of cool things that I won’t even touch on but the coolest to me is the ability to write in both R and Observable within the same notebook. So if you need to do something with a large dataset it is possible to preprocess it in R and then do what you want in Observable. There is an option to freeze the execution of R if you are doing some heavy processing and you don’t want it to run every time someone loads your site. Additionally, it looks like you can pair Observable with Shiny Reactives. Leveraging a Shiny server with an Observable front end seems super convenient for any cases where Observable alone can’t handle the workload. I haven’t used it enough to give my full thoughts on it yet, but so far it has been extremely promising development for my workflow."
  },
  {
    "objectID": "posts/hello-observable/index.html#sharing-your-work",
    "href": "posts/hello-observable/index.html#sharing-your-work",
    "title": "Hello, Observable!",
    "section": "Sharing Your Work",
    "text": "Sharing Your Work\nAfter you finish your project you can share your notebook within the Observable ecosystem or link it on social media. If you want it to live on your website there are a couple of ways to do that as well. Observable has exporting abilities, a download code option or an embed option. I usually just use the embed option. You can embed it as an iframe, or you can embed it with Observable’s runtime in JavaScript. This is usually what I do, so although you are relying on Observable’s runtime, you can actually customize all of the styling within your own environment. If you choose to go the Quarto route, it is also super easy to either create a stand alone html file or a whole site through Quarto. You are probably looking at this notebook how Quarto rendered it, but here is the original Observable notebook as well. Thanks for reading this post. Please let me know if there are really cool things about Observable I missed."
  },
  {
    "objectID": "posts/pet-cats-uk/index.html",
    "href": "posts/pet-cats-uk/index.html",
    "title": "UK Pet Cats",
    "section": "",
    "text": "I wanted to do a Tidy Tuesday blog post for a while now and I finally carved out some time to make one. This week has tracking data from a study on pet cats, looks like only the UK test site was included. Checkout the Github Readme for more info."
  },
  {
    "objectID": "posts/pet-cats-uk/index.html#introduction",
    "href": "posts/pet-cats-uk/index.html#introduction",
    "title": "UK Pet Cats",
    "section": "",
    "text": "I wanted to do a Tidy Tuesday blog post for a while now and I finally carved out some time to make one. This week has tracking data from a study on pet cats, looks like only the UK test site was included. Checkout the Github Readme for more info."
  },
  {
    "objectID": "posts/pet-cats-uk/index.html#data-processing",
    "href": "posts/pet-cats-uk/index.html#data-processing",
    "title": "UK Pet Cats",
    "section": "Data Processing",
    "text": "Data Processing\nI decided to use Observable JS this week and imported the Arquero library in the spirit of being tidy. Arquero is basically dplyr for JavaScript, so if you were too annoyed or intimidated by JavaScript data wrangling methods before hopefully this gives you another excuse to try it out. I didn’t do much processing this week, just combined the cats_uk.csv with the cats_uk_reference.csv. I left in all of the outliers and didn’t compute any summary statistics. You can download my combined dataset by clicking on the button below.\n\n\nCode\nimport { aq, op } from \"@uwdata/arquero\"\nimport {button} from \"@jeremiak/download-data-button\"\n\ncats_uk = aq.loadCSV(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-31/cats_uk.csv\")\n\ncats_uk_ref = aq.loadCSV(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-31/cats_uk_reference.csv\")\n\ncombine = cats_uk.join(cats_uk_ref)\ndata = combine.objects()\n\nInputs.table(data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbutton(data, \"UK_Cats.csv\")"
  },
  {
    "objectID": "posts/pet-cats-uk/index.html#uk-cat-timeline",
    "href": "posts/pet-cats-uk/index.html#uk-cat-timeline",
    "title": "UK Pet Cats",
    "section": "UK Cat Timeline",
    "text": "UK Cat Timeline\nFirst, I wanted to see how long each cat was tracked. It looked like the majority were tracked for only a week or less (except for Jessie and Macauley Mccat). If you hover over the bar for each cat with your mouse it will give you more information. In addition, I colored the cats’ bars by the number of reported hours they were indoors. But if you would prefer to group them differently try the following options.\n\n\nCode\nviewof color = {\n  const values =new Map([[\"# of Hours Indoors\", \"hrs_indoors\"], [\"# of Cats in Household\", \"n_cats\"], [\"Sex\", \"animal_sex\"], [\"Reproductive Status\", \"animal_reproductive_condition\"]]);\n  return Inputs.radio(values, {\n    key: values.keys().next().value\n  });\n}\n\ntime = d3.timeFormat(\"%B %d, %Y\")\n\nPlot.plot({\n  marginLeft: 50,\ncolor:{\n    scheme: \"Tableau10\",\n    label: color,\n    type: \"ordinal\",\n    legend: \"ramp\"\n  },\n  x: {\n    axis: \"top\",\n    grid: true\n  },\n  y: {\n    axis: null,\n    domain: d3.sort(data, d =&gt; d.deploy_on_date).map(d =&gt; d.animal_id)\n  },\n  marks: [\n    Plot.barX(data, {\n      x1: \"deploy_on_date\",\n      x2: \"deploy_off_date\",\n      y: \"animal_id\",\n      fill: color,\n      title: (d) =&gt; `${d.animal_id}\\nStudy Length: ${time(d.deploy_on_date)} - ${time(d.deploy_off_date)} \\nSex: ${d.animal_sex == \"m\" ? \"male\": \"female\"} \\nAge: ${d.age_years} years old \\n# of Cats in Household: ${d.n_cats}`\n    }),\n     Plot.text(cats_uk_ref.objects(), {\n      x: \"deploy_on_date\",\n      y: \"animal_id\",\n      text: \"animal_id\",\n      textAnchor: \"end\",\n      dx: -3\n    })\n  ]\n})"
  },
  {
    "objectID": "posts/pet-cats-uk/index.html#explore-your-favorite-cat",
    "href": "posts/pet-cats-uk/index.html#explore-your-favorite-cat",
    "title": "UK Pet Cats",
    "section": "Explore Your Favorite Cat",
    "text": "Explore Your Favorite Cat\nThis section was heavily inspired by Plot’s density mark tutorial . I wanted to see each individual cat’s footprint for their respective week. You can select your favorite cat using the dropdown below. Some cats barely roamed at all, while others went all over the place. With this plot it is really easy to spot some of the outliers. You can play around with the thresholds and bandwidth of the plot as well.\n\n\nCode\nviewof cat = Inputs.select(data.map(d =&gt; d.animal_id), {value:\"Lightening Bugg\", label: \"Cat Tag\", sort: true, unique: true})\nviewof thresholds = Inputs.range([1, 40], {value: 10, step: 1, label: \"Thresholds\"})\nviewof bandwidth = Inputs.range([0, 40], {value: 20, step: 0.2, label: \"Bandwidth\"})\n\nPlot.plot({\n  inset:20,\n  marginLeft: 60,\n  marks: [\n    Plot.density(data.filter((d) =&gt; d.animal_id == cat), {x: \"location_long\", y: \"location_lat\", bandwidth, thresholds, clip: true}),\n    Plot.dot(data.filter((d) =&gt; d.animal_id == cat), {x: \"location_long\", y: \"location_lat\", })\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n’s Location in Relation to All Cats\nNow that you found  you can see where they are relative to all of their cat peers. As you can see there were a bunch in a pretty small area. Try picking another cat and see where they end up on this density plot.\n\n\nCode\ndensity.legend(\"color\", {marginLeft: 5, label: \"Density\"})\n\n\n\n\n\n\n\n\n\nCode\ndensity = Plot.plot({\n  inset: 40,\n  marginLeft: 40,\n  color: {\n    scheme: \"ylgnbu\",\n  },\n  marks: [\n    Plot.density(data, {x: \"location_long\", y: \"location_lat\", fill: \"density\", clip: true}),\n    Plot.dot(data.filter((d) =&gt; d.animal_id == cat), {x: \"location_long\", y: \"location_lat\", stroke:\"red\", }),\n    Plot.text(data.filter((d) =&gt; d.animal_id == cat), {x: \"location_long\", y: \"location_lat\", dx: 7, fill: \"currentColor\", stroke: \"white\", textAnchor: \"start\", text: (d) =&gt; `${cat}`}),\n    Plot.frame()\n  ]\n})"
  },
  {
    "objectID": "posts/pet-cats-uk/index.html#felt",
    "href": "posts/pet-cats-uk/index.html#felt",
    "title": "UK Pet Cats",
    "section": "Felt",
    "text": "Felt\nLast thing, I have been following Felt on twitter for a while now. I saw this tweet and immediately needed to try it. It was super simple to just drag and drop a .csv file and get going. Check it out! You should be able to edit this map if you create your own Felt account. Thanks for reading!\n\n\nCode\nhtml`\n&lt;iframe width=\"100%\" height=\"600\" frameborder=\"0\" title=\"Felt Map\" src=\"https://felt.com/embed/map/UK-Cats-Qkc0B5HpTzuh4xoLFJ446A?lat=50.418463&lon=-4.789399&zoom=9.138\"&gt;&lt;/iframe&gt;`"
  },
  {
    "objectID": "posts/recipe-web-scrape/index.html",
    "href": "posts/recipe-web-scrape/index.html",
    "title": "Recipe Web Scraping in Observable",
    "section": "",
    "text": "This web scraping blog post is heavily inspired by the Paprika App which I just started using. It saves the recipe information and gets rid of all of the annoying ads. My biggest pet peeve is scrolling through 5 million pop-up ads to get to a recipe. This blog post is really just to see if I could web scrape in ObservableJS. I plan on creating an actual recipe web app with Sveltekit eventually where I can save recipe information to my own database. But for now this is my proof of concept."
  },
  {
    "objectID": "posts/recipe-web-scrape/index.html#introduction",
    "href": "posts/recipe-web-scrape/index.html#introduction",
    "title": "Recipe Web Scraping in Observable",
    "section": "",
    "text": "This web scraping blog post is heavily inspired by the Paprika App which I just started using. It saves the recipe information and gets rid of all of the annoying ads. My biggest pet peeve is scrolling through 5 million pop-up ads to get to a recipe. This blog post is really just to see if I could web scrape in ObservableJS. I plan on creating an actual recipe web app with Sveltekit eventually where I can save recipe information to my own database. But for now this is my proof of concept."
  },
  {
    "objectID": "posts/recipe-web-scrape/index.html#how-it-works",
    "href": "posts/recipe-web-scrape/index.html#how-it-works",
    "title": "Recipe Web Scraping in Observable",
    "section": "How it Works",
    "text": "How it Works\nI stumbled upon Ben Awad’s blog post on scraping recipe websites. It turns out that most websites have metadata for search engines. Nicolas Lambert’s Observable Notebook shows how you can use both Axios and Cheerio in ObservableJS to web scrape data.\n\n\n\n\n\n\nTip\n\n\n\nOne problem with this method is that if a recipe website uses purely JavaScript you might need to do more work (look into Selenium or Puppeteer).\n\n\n\naxios = require('https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js')\n\nresult = axios({\n  method: \"get\",\n  url: `https://corsproxy.io/?${input}`\n}).then((result) =&gt; result.data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMost of the time recipe websites will not have CORS enabled so to get the request you will need to set up a CORS proxy server. So the above code gets the HTML request via the Axios library. Here is what the raw HTML looks like.\n\n\nCode\nresult\n\n\n\n\n\n\n\nWe need to parse the HTML with the the Cheerio.js library to find the script with type=\"application/ld+json\" this is the metadata.\n\ncheerio = require('https://bundle.run/cheerio@1.0.0-rc.5')\n\n$ = cheerio.load(result)\n\njsonRaw = $(\"script[type='application/ld+json']\")[0].children[0].data\n\njson = JSON.parse(jsonRaw)\n\njson\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvery website has their metadata organized slightly differently so I created this function to check for where the recipe data is. It is not very elegant but it gets the job done most of the time.\n\nfunction checkRecipe(json) {\n  let recipe;\n  if (json.hasOwnProperty(\"@graph\")) {\n  const object = json[\"@graph\"].filter(obj =&gt; { return obj[\"@type\"] === \"Recipe\"});\n    recipe = object[0];\n  } else {\n    recipe = json[0];\n  }\n  return recipe;\n}\n\ndata = checkRecipe(json)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThen I just pull out the relevant info that I want.\n\n\nCode\nname = data.name\n\npic = data.image[0] ? data.image[0] : data.image.url\n\ningredients = Object.assign(data.recipeIngredient)\n\ninstructions = Object.assign(data.recipeInstructions).map((item) =&gt; {\n  return item['text'];\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGo ahead and try your favorite recipe website and let me know how it goes.\n\n\nCode\nviewof input = Inputs.text({label: \"Recipe URL\", width:width, value: \"https://justinesnacks.com/courgette-tart-with-lemon-ricotta/\", submit: true})\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf the recipe website uses WordPress or something similar it has a higher likelihood of working 🤞. But there are no guarantees in the world of web scraping.\n\n\nHere are a couple of sites that work:\n\nDishing Out Health\nBudget Bytes\nAmbitious Kitchen\nSally’s Baking Addiction\nCookerru"
  },
  {
    "objectID": "posts/recipe-web-scrape/index.html#recipe",
    "href": "posts/recipe-web-scrape/index.html#recipe",
    "title": "Recipe Web Scraping in Observable",
    "section": "Recipe",
    "text": "Recipe\n\n\nCode\nmd`### ${name}`\n\n\n\n\n\n\n\n\n\nCode\nhtml`&lt;img style=\"object-fit: cover;\" height=\"600\" width=\"100%\" src=\"${pic}\"&gt;`\n\n\n\n\n\n\n\n\n\nHere I use D3 to create the ingredient and recipe lists.\n\n\nCode\ningredientList = {\n  const ul = d3.create('ul');\n  \n  ul.selectAll('li')  \n    .data(ingredients)   \n    .join('li')       \n      .text(d =&gt; `${d}`) \n  \n  return ul.node(); \n}\n\ninstructionList = {\n  const ol = d3.create('ol');\n  \n  ol.selectAll('li')  \n    .data(instructions)   \n    .join('li')       \n      .text(d =&gt; `${d}`) \n  \n  return ol.node(); \n}"
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html",
    "href": "posts/nba-stats-exploration/index.html",
    "title": "NBA Stats Exploration",
    "section": "",
    "text": "Hello! This first chart explores all of the seasons in this dataset that I found on Kaggle. I organized the stats by team and you can pick whichever statistic and season(s) you would like to compare. If you mouseover the dots you can see the player’s name. If you go back far enough you can even see some old teams.\n\n\nCode\nexploreChart = Plot.plot({\n  grid: true,\n  marginRight: 60,\n  width: width,\n  x: { label: null, tickRotate: 90 },\n  fy: { tickPadding: -15 },\n  facet: {\n    data: filtered,\n    y: \"season\",\n    label: null\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(filtered, {\n      x: \"team\",\n      y: radio,\n      title: \"player\",\n      stroke: \"team\"\n    }),\n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof radio = Inputs.radio(stats, { value: stats[0], width:width })\n\nviewof checkbox = Inputs.checkbox(\n  d3.group(nba, (d) =&gt; d.season),\n  { key: [\"2018-19\", \"2019-20\", \"2020-21\"]}\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, I wanted to compare the best players in this era. So I selected the players who were top ten in average points, rebounds, or assists in the NBA over this time period (with at least 10 seasons played). Can you guess who the noodles are in these spaghetti charts? You can mouseover the noodles for the player name and/or toggle the checkbox below to show more detailed statistics of each chart. The results are surprising (at least to me).\n\n\n\n\n\n\nNote\n\n\n\nThis is not an optimal way of finding the best NBA players of all time as I only had a snapshot of about 25 seasons. Great players who play/played on either end of this timeline may not have truly been captured by these charts."
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#introduction",
    "href": "posts/nba-stats-exploration/index.html#introduction",
    "title": "NBA Stats Exploration",
    "section": "",
    "text": "Hello! This first chart explores all of the seasons in this dataset that I found on Kaggle. I organized the stats by team and you can pick whichever statistic and season(s) you would like to compare. If you mouseover the dots you can see the player’s name. If you go back far enough you can even see some old teams.\n\n\nCode\nexploreChart = Plot.plot({\n  grid: true,\n  marginRight: 60,\n  width: width,\n  x: { label: null, tickRotate: 90 },\n  fy: { tickPadding: -15 },\n  facet: {\n    data: filtered,\n    y: \"season\",\n    label: null\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(filtered, {\n      x: \"team\",\n      y: radio,\n      title: \"player\",\n      stroke: \"team\"\n    }),\n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof radio = Inputs.radio(stats, { value: stats[0], width:width })\n\nviewof checkbox = Inputs.checkbox(\n  d3.group(nba, (d) =&gt; d.season),\n  { key: [\"2018-19\", \"2019-20\", \"2020-21\"]}\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext, I wanted to compare the best players in this era. So I selected the players who were top ten in average points, rebounds, or assists in the NBA over this time period (with at least 10 seasons played). Can you guess who the noodles are in these spaghetti charts? You can mouseover the noodles for the player name and/or toggle the checkbox below to show more detailed statistics of each chart. The results are surprising (at least to me).\n\n\n\n\n\n\nNote\n\n\n\nThis is not an optimal way of finding the best NBA players of all time as I only had a snapshot of about 25 seasons. Great players who play/played on either end of this timeline may not have truly been captured by these charts."
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#top-scorers",
    "href": "posts/nba-stats-exploration/index.html#top-scorers",
    "title": "NBA Stats Exploration",
    "section": "Top Scorers",
    "text": "Top Scorers\n\n\nCode\nptsChart = makeChart1(showPtsChart)\n\nviewof showPtsChart = Inputs.toggle({label: \"Show Stats\", values: [\"ptsChart2\", \"ptsChart1\"]})"
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#top-rebounders",
    "href": "posts/nba-stats-exploration/index.html#top-rebounders",
    "title": "NBA Stats Exploration",
    "section": "Top Rebounders",
    "text": "Top Rebounders\n\n\nCode\nrebChart = makeChart2(showRebChart)\n\nviewof showRebChart = Inputs.toggle({label: \"Show Stats\", values: [\"rebChart2\", \"rebChart1\"]})"
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#top-assisters",
    "href": "posts/nba-stats-exploration/index.html#top-assisters",
    "title": "NBA Stats Exploration",
    "section": "Top Assisters",
    "text": "Top Assisters\n\n\nCode\nastChart = makeChart3(showAstChart)\n\nviewof showAstChart = Inputs.toggle({label: \"Show Stats\", values: [\"astChart2\", \"astChart1\"]})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs an employee of University of Michigan (go blue!!) and as a husband of a Canadian, I created some charts where you can filter by players’ college or country."
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#players-by-college",
    "href": "posts/nba-stats-exploration/index.html#players-by-college",
    "title": "NBA Stats Exploration",
    "section": "Players by College",
    "text": "Players by College\n\n\nCode\ncollegeChart = Plot.plot({\n  grid: true, \n  width: width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    type:\"point\"\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(nba.filter(d =&gt; d.college === collegepick), {\n      x: \"season\",\n      y: radio2,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.college === collegepick), {\n      x: \"season\",\n      y: radio2,\n      stroke: \"player\",\n    curve: \"catmull-rom\"})\n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof radio2 = Inputs.radio(stats2, { value: stats2[0] })\n\nviewof collegepick = Inputs.select(nba.map(d =&gt; d.college), {label: \"College\", value: \"Michigan\", sort: true, unique: true})"
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#players-by-country",
    "href": "posts/nba-stats-exploration/index.html#players-by-country",
    "title": "NBA Stats Exploration",
    "section": "Players by Country",
    "text": "Players by Country\n\n\nCode\ncountryChart = Plot.plot({\n  grid: true, \n  width: width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    type:\"point\"\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(nba.filter(d =&gt; d.country === countrypick), {\n      x: \"season\",\n      y: radio3,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.country === countrypick), {\n      x: \"season\",\n      y: radio3,\n      stroke: \"player\",\n    curve: \"catmull-rom\"})\n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof radio3 = Inputs.radio(stats2, { value: stats2[0] })\n\nviewof countrypick = Inputs.select(nba.map(d =&gt; d.country), {label: \"Country\", value: \"Canada\", sort: true, unique: true})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd finally pick your five favorite players in this era to compare their stats."
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#compare-your-favorite-players",
    "href": "posts/nba-stats-exploration/index.html#compare-your-favorite-players",
    "title": "NBA Stats Exploration",
    "section": "Compare Your Favorite Players",
    "text": "Compare Your Favorite Players\n\n\nCode\nfavChart = Plot.plot({\n  grid: true,\n  width: width,\n  marginBottom: 60,\n  marginRight: 70,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    type:\"point\"\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(nba.filter(d =&gt; d.player === playerpick1), {\n      x: \"season\",\n      y: radio4,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.player === playerpick1), {\n      x: \"season\",\n      y: radio4,\n      stroke: \"player\",\n    curve: \"catmull-rom\"}),\n    Plot.text(nba.filter(d =&gt; d.player === playerpick1), Plot.selectLast({x: \"season\", y: radio4, text: \"player\", textAnchor: \"start\", dx: 6})),\n    Plot.dot(nba.filter(d =&gt; d.player === playerpick2), {\n      x: \"season\",\n      y: radio4,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.player === playerpick2), {\n      x: \"season\",\n      y: radio4,\n      stroke: \"player\",\n    curve: \"catmull-rom\"}),\n    Plot.text(nba.filter(d =&gt; d.player === playerpick2), Plot.selectLast({x: \"season\", y: radio4, text: \"player\", textAnchor: \"start\", dx: 6})),\n    Plot.dot(nba.filter(d =&gt; d.player === playerpick3), {\n      x: \"season\",\n      y: radio4,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.player === playerpick3), {\n      x: \"season\",\n      y: radio4,\n      stroke: \"player\",\n    curve: \"catmull-rom\"}),\n    Plot.text(nba.filter(d =&gt; d.player === playerpick3), Plot.selectLast({x: \"season\", y: radio4, text: \"player\", textAnchor: \"start\", dx: 6})),\n    Plot.dot(nba.filter(d =&gt; d.player === playerpick4), {\n      x: \"season\",\n      y: radio4,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.player === playerpick4), {\n      x: \"season\",\n      y: radio4,\n      stroke: \"player\",\n    curve: \"catmull-rom\"}),\n    Plot.text(nba.filter(d =&gt; d.player === playerpick4), Plot.selectLast({x: \"season\", y: radio4, text: \"player\", textAnchor: \"start\", dx: 6})),\n    Plot.dot(nba.filter(d =&gt; d.player === playerpick5), {\n      x: \"season\",\n      y: radio4,\n      title: (d) =&gt; `${d.player}`,\n      stroke: \"player\",\n      r: 4,\n    }),\n    Plot.line(nba.filter(d =&gt; d.player === playerpick5), {\n      x: \"season\",\n      y: radio4,\n      stroke: \"player\",\n    curve: \"catmull-rom\"}),\n    Plot.text(nba.filter(d =&gt; d.player === playerpick5), Plot.selectLast({x: \"season\", y: radio4, text: \"player\", textAnchor: \"start\", dx: 6}))\n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof radio4 = Inputs.radio(stats2, { value: stats2[0] })\n\nviewof playerpick1 = Inputs.text({label: \"Player #1\", placeholder: \"Enter player's name\", value: \"LeBron James\"})\n\nviewof playerpick2 = Inputs.text({label: \"Player #2\", placeholder: \"Enter player's name\", value: \"Kobe Bryant\"})\n\nviewof playerpick3 = Inputs.text({label: \"Player #3\", placeholder: \"Enter player's name\", value: \"Kevin Durant\"})\n\nviewof playerpick4 = Inputs.text({label: \"Player #4\", placeholder: \"Enter player's name\", value: \"Russell Westbrook\"})\n\nviewof playerpick5 = Inputs.text({label: \"Player #5\", placeholder: \"Enter player's name\", value: \"Chris Paul\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThanks for making it to the end!"
  },
  {
    "objectID": "posts/nba-stats-exploration/index.html#appendix",
    "href": "posts/nba-stats-exploration/index.html#appendix",
    "title": "NBA Stats Exploration",
    "section": "Appendix",
    "text": "Appendix\n\nPlots\n\nimport { Plot } from \"@mkfreeman/plot-tooltip\"\n\nmakeChart1 = (showPtsChart) =&gt; {\n  return showPtsChart === \"ptsChart1\" ? ptsChart1() : ptsChart2()\n}\n\nptsChart1 = () =&gt; Plot.plot({\n  width:width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    type:\"point\"\n  },\n  marks: [\n    Plot.line(nba.filter(d =&gt; d.player === \"LeBron James\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", strokeOpacity: 0, title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Kevin Durant\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Allen Iverson\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"James Harden\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Kobe Bryant\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Stephen Curry\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Russell Westbrook\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Carmelo Anthony\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Shaquille O'Neal\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Dwyane Wade\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),    \n  ],\n  tooltip: {\n    stroke: \"red\",\n    \"stroke-width\": \"15px\"\n  }\n})\n\nptsChart2 = () =&gt; Plot.plot({\n  width:width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    grid: true,\n    type:\"point\"\n  },\n  y: {\n    grid: true\n  },\n  \n  marks: [\n    Plot.dot(nba.filter(d =&gt; d.player === \"LeBron James\"), {x: \"season\", y: \"Points\", stroke: \"player\", r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"LeBron James\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Kevin Durant\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Kevin Durant\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\",  stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Allen Iverson\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Allen Iverson\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"James Harden\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"James Harden\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Kobe Bryant\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Kobe Bryant\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Stephen Curry\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Stephen Curry\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Russell Westbrook\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Russell Westbrook\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Carmelo Anthony\"), {x: \"season\", y: \"Points\", stroke: \"player\" ,  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Carmelo Anthony\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Shaquille O'Neal\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Shaquille O'Neal\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),\nPlot.dot(nba.filter(d =&gt; d.player === \"Dwyane Wade\"), {x: \"season\", y: \"Points\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Points}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Dwyane Wade\"), {x: \"season\", y: \"Points\", curve: \"catmull-rom\", stroke: \"player\"}),    \n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\nmakeChart2 = (showRebChart) =&gt; {\n  return showRebChart === \"rebChart1\" ? rebChart1() : rebChart2()\n}\n\nrebChart1 = () =&gt; Plot.plot({\n  width:width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    type:\"point\"\n  },\n  marks: [\n    Plot.line(nba.filter(d =&gt; d.player === \"Dwight Howard\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n    \n    Plot.line(nba.filter(d =&gt; d.player === \"Kevin Love\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Tim Duncan\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"DeAndre Jordan\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Shaquille O'Neal\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Kevin Garnett\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Carlos Boozer\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Chris Webber\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Marcus Camby\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Ben Wallace\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),    \n  ],\n  tooltip: {\n    stroke: \"red\",\n    \"stroke-width\": \"15px\"\n  }\n})\n\nrebChart2 = () =&gt; Plot.plot({\n  width:width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    grid: true,\n    type:\"point\"\n  },\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.dot(nba.filter(d =&gt; d.player === \"Dwight Howard\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\", r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Dwight Howard\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Kevin Love\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Kevin Love\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\",  stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Tim Duncan\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Tim Duncan\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"DeAndre Jordan\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"DeAndre Jordan\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Shaquille O'Neal\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Shaquille O'Neal\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Kevin Garnett\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Kevin Garnett\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Carlos Boozer\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Carlos Boozer\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Chris Webber\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\" ,  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Chris Webber\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Marcus Camby\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Marcus Camby\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),\nPlot.dot(nba.filter(d =&gt; d.player === \"Ben Wallace\"), {x: \"season\", y: \"Rebounds\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Rebounds}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Ben Wallace\"), {x: \"season\", y: \"Rebounds\", curve: \"catmull-rom\", stroke: \"player\"}),    \n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\nmakeChart3 = (showAstChart) =&gt; {\n  return showAstChart === \"astChart1\" ? astChart1() : astChart2()\n}\n\nastChart1 = () =&gt; Plot.plot({\n  width:width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    type:\"point\"\n  },\n  marks: [\n    Plot.line(nba.filter(d =&gt; d.player === \"Chris Paul\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n    \n    Plot.line(nba.filter(d =&gt; d.player === \"Jason Kidd\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Russell Westbrook\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Rajon Rondo\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Steve Nash\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Deron Williams\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"LeBron James\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Stephon Marbury\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Baron Davis\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),\n\n    Plot.line(nba.filter(d =&gt; d.player === \"Gary Payton\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", strokeWidth: 5, stroke: \"lightgray\", title: (d) =&gt; `${d.player}`}),    \n  ],\n  tooltip: {\n    stroke: \"red\",\n    \"stroke-width\": \"15px\"\n  }\n})\n\nastChart2 = () =&gt; Plot.plot({\n  width:width,\n  marginBottom: 60,\n  x: {\n    tickRotate: 90,\n    label: \"Seasons →\",\n    grid: true,\n    type:\"point\"\n  },\n  y: {\n    grid: true\n  },\n  marks: [\n    Plot.dot(nba.filter(d =&gt; d.player === \"Chris Paul\"), {x: \"season\", y: \"Assists\", stroke: \"player\", r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Chris Paul\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Jason Kidd\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Jason Kidd\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\",  stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Russell Westbrook\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Russell Westbrook\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Rajon Rondo\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Rajon Rondo\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Steve Nash\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Steve Nash\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Deron Williams\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Deron Williams\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"LeBron James\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"LeBron James\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Stephon Marbury\"), {x: \"season\", y: \"Assists\", stroke: \"player\" ,  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Stephon Marbury\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\n    Plot.dot(nba.filter(d =&gt; d.player === \"Baron Davis\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Baron Davis\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),\nPlot.dot(nba.filter(d =&gt; d.player === \"Gary Payton\"), {x: \"season\", y: \"Assists\", stroke: \"player\",  r: 4, title: (d) =&gt; `${d.player} \\n Season Avg: ${d.Assists}`}),\n    Plot.line(nba.filter(d =&gt; d.player === \"Gary Payton\"), {x: \"season\", y: \"Assists\", curve: \"catmull-rom\", stroke: \"player\"}),    \n  ],\n  tooltip: {\n    r: 15\n  }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData\n\nimport { aq, op } from '@uwdata/arquero'\n\ndata = FileAttachment(\"all_seasons.csv\").csv()\n\nstats = [\"Points\", \"Rebounds\", \"Assists\", \"Games Played\", \"Height\", \"Age\"]\n\nstats2 = [\"Points\", \"Rebounds\", \"Assists\"]\n\nnba = {\n  const subset = data.map(\n    ({\n      player_name,\n      team_abbreviation,\n      age,\n      college,\n      country,\n      gp,\n      pts,\n      reb,\n      ast,\n      season,\n      player_height,\n      player_weight,\n      draft_round,\n      draft_number,\n      usg_pct,\n      ts_pct\n    }) =&gt; ({\n      player: player_name,\n      team: team_abbreviation,\n      Age: +age,\n      college: college,\n      country: country,\n      [\"Games Played\"]: +gp,\n      Points: +pts,\n      Rebounds: +reb,\n      Assists: +ast,\n      season: season.toString(),\n      Height: +player_height,\n      Weight: +player_weight,\n      draft_round: draft_round,\n      draft_number: +draft_number,\n      [\"Usage Percentage\"]: +(usg_pct * 100),\n      [\"True Shooting Percentage\"]: +(ts_pct * 100)\n    })\n  );\n\n  return subset;\n}\n\nfiltered = checkbox.flat()\n\nviewof nba2 = aq \n  .fromCSV(await FileAttachment('all_seasons.csv').text())\n  .view({ height: 240 })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnba2\n  .groupby('player_name')\n  .rollup({\n    mean_pts: d =&gt; op.mean(d.pts),\n    count: op.count()\n  })\n  .filter(d =&gt; d.count &gt; 10)\n  .orderby(aq.desc('mean_pts'))\n  .slice(0,10)\n  .view(10)\n\n\n\n\n\n\n\nnba2\n  .groupby('player_name')\n  .rollup({\n    mean_reb: d =&gt; op.mean(d.reb),\n    count: op.count()\n  })\n  .filter(d =&gt; d.count &gt; 10) \n  .orderby(aq.desc('mean_reb'))\n  .slice(0,10)\n  .view(10)\n\n\n\n\n\n\n\nnba2\n  .groupby('player_name')\n  .rollup({\n    mean_ast: d =&gt; op.mean(d.ast),\n    count: op.count()\n  })\n  .filter(d =&gt; d.count &gt; 10) \n  .orderby(aq.desc('mean_ast'))\n  .slice(0,10)\n  .view(10)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Gilpatrick",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nRecipe Web Scraping in Observable\n\n\n3 min\n\n\n\nObservable JS\n\n\nWeb Scraping\n\n\nTutorial\n\n\n\nTutorial on how to web scrape recipes with Observable.\n\n\n\nScott Franz\n\n\nJun 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUK Pet Cats\n\n\n4 min\n\n\n\nTidy Tuesday\n\n\nObservable JS\n\n\n\nA Tidy Tuesday visualization of UK pet cats.\n\n\n\nScott Franz\n\n\nJan 31, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHello, Observable!\n\n\n12 min\n\n\n\nObservable JS\n\n\nTutorial\n\n\n\nA quick glance at Observable. A new reactive programming ecosystem geared towards data visualization.\n\n\n\nScott Franz\n\n\nMay 21, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNBA Stats Exploration\n\n\n21 min\n\n\n\nObservable JS\n\n\nNBA\n\n\n\nAn exploration of NBA players from 1996 to 2021. A look into the top players of that era.\n\n\n\nScott Franz\n\n\nMar 3, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Life in Weeks\n\n\n2 min\n\n\n\nObservable JS\n\n\nCalculator\n\n\n\nA waffle chart displaying how many weeks you have lived, and how many you have left.\n\n\n\nScott Franz\n\n\nFeb 22, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  }
]